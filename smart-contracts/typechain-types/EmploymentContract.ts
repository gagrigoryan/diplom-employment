/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface EmploymentContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activateContract"
      | "agreementHash"
      | "employee"
      | "employer"
      | "endDate"
      | "getContractAgreementHash"
      | "head"
      | "isActive"
      | "isContractActive"
      | "paySalary"
      | "paySickLeave"
      | "requestSickLeave"
      | "salary"
      | "sickLeave"
      | "startDate"
      | "terminateContract"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SickLeaveTransaction"): EventFragment;

  encodeFunctionData(
    functionFragment: "activateContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "agreementHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "employee", values?: undefined): string;
  encodeFunctionData(functionFragment: "employer", values?: undefined): string;
  encodeFunctionData(functionFragment: "endDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getContractAgreementHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "head", values?: undefined): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isContractActive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paySalary", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paySickLeave",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSickLeave",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "salary", values?: undefined): string;
  encodeFunctionData(functionFragment: "sickLeave", values?: undefined): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "terminateContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agreementHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "employer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractAgreementHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "head", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isContractActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paySalary", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paySickLeave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSickLeave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salary", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sickLeave", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "terminateContract",
    data: BytesLike
  ): Result;
}

export namespace SickLeaveTransactionEvent {
  export type InputTuple = [
    sender: AddressLike,
    reciever: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [sender: string, reciever: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    reciever: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EmploymentContract extends BaseContract {
  connect(runner?: ContractRunner | null): EmploymentContract;
  waitForDeployment(): Promise<this>;

  interface: EmploymentContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activateContract: TypedContractMethod<[], [void], "nonpayable">;

  agreementHash: TypedContractMethod<[], [string], "view">;

  employee: TypedContractMethod<[], [string], "view">;

  employer: TypedContractMethod<[], [string], "view">;

  endDate: TypedContractMethod<[], [bigint], "view">;

  getContractAgreementHash: TypedContractMethod<[], [string], "view">;

  head: TypedContractMethod<[], [string], "view">;

  isActive: TypedContractMethod<[], [boolean], "view">;

  isContractActive: TypedContractMethod<[], [boolean], "view">;

  paySalary: TypedContractMethod<[], [void], "payable">;

  paySickLeave: TypedContractMethod<[_index: BigNumberish], [void], "payable">;

  requestSickLeave: TypedContractMethod<
    [_startDate: BigNumberish, _endDate: BigNumberish],
    [void],
    "nonpayable"
  >;

  salary: TypedContractMethod<[], [bigint], "view">;

  sickLeave: TypedContractMethod<
    [],
    [[bigint, bigint] & { totalDays: bigint; usedDays: bigint }],
    "view"
  >;

  startDate: TypedContractMethod<[], [bigint], "view">;

  terminateContract: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activateContract"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "agreementHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "employee"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "employer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "endDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getContractAgreementHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "head"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isContractActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "paySalary"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "paySickLeave"
  ): TypedContractMethod<[_index: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "requestSickLeave"
  ): TypedContractMethod<
    [_startDate: BigNumberish, _endDate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "salary"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sickLeave"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { totalDays: bigint; usedDays: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "startDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "terminateContract"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "SickLeaveTransaction"
  ): TypedContractEvent<
    SickLeaveTransactionEvent.InputTuple,
    SickLeaveTransactionEvent.OutputTuple,
    SickLeaveTransactionEvent.OutputObject
  >;

  filters: {
    "SickLeaveTransaction(address,address,uint256)": TypedContractEvent<
      SickLeaveTransactionEvent.InputTuple,
      SickLeaveTransactionEvent.OutputTuple,
      SickLeaveTransactionEvent.OutputObject
    >;
    SickLeaveTransaction: TypedContractEvent<
      SickLeaveTransactionEvent.InputTuple,
      SickLeaveTransactionEvent.OutputTuple,
      SickLeaveTransactionEvent.OutputObject
    >;
  };
}
